@model SaazApplication.Models.CmpCombine

@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/jqueryval")
<script src="~/Scripts/jquery-1.10.2.min.js"></script>
@*<script src="~/Scripts/jquery-1.10.2.js"></script>*@
<script>
    $(document).ready(function () {

        $("#State").prop("disabled", true);
        $("#Country").change(function () {
            if ($("#Country").val() != "Select") {
                var CountryOptions = {};
                CountryOptions.url = "/Role1/states";
                CountryOptions.type = "POST";
                CountryOptions.data = JSON.stringify({ Country: $("#Country").val() });
                CountryOptions.datatype = "json";
                CountryOptions.contentType = "application/json";
                CountryOptions.success = function (StatesList) {
                    $("#State").empty();
                    for (var i = 0; i < StatesList.length; i++) {
                        $("#State").append("<option>" + StatesList[i] + "</option>");
                    }
                    $("#State").prop("disabled", false);
                };
                CountryOptions.error = function () { alert("Error in Getting States!!"); };
                $.ajax(CountryOptions);
            }
            else {
                $("#State").empty();
                $("#State").prop("disabled", true);
            }
        });

        $("#IFSCCode").prop("disabled", true);
        $("#BankName").change(function () {
            if ($("#BankName").val() != "Select") {
                var CountryOptions = {};
                CountryOptions.url = "/Role1/IFSCCode";
                CountryOptions.type = "POST";
                CountryOptions.data = JSON.stringify({ BankName: $("#BankName").val() });
                CountryOptions.datatype = "json";
                CountryOptions.contentType = "application/json";
                CountryOptions.success = function (StatesList) {
                    $("#IFSCCode").empty();
                    for (var i = 0; i < StatesList.length; i++) {
                        $("#IFSCCode").append("<option>" + StatesList[i] + "</option>");
                    }
                    $("#IFSCCode").prop("disabled", false);
                };
                CountryOptions.error = function () { alert("Error in Getting IFSCCode!!"); };
                $.ajax(CountryOptions);
            }
            else {
                $("#IFSCCode").empty();
                $("#IFSCCode").prop("disabled", true);
            }
        });

    });

    $(function () {
        //for bootstrap 3 use 'shown.bs.tab' instead of 'shown' in the next line
        $('a[data-toggle="tab"]').on('click', function (e) {
            //save the latest tab; use cookies if you like 'em better:
            localStorage.setItem('lastTab', $(e.target).attr('href'));
        });

        //go to the latest tab, if it exists:
        var lastTab = localStorage.getItem('lastTab');

        if (lastTab) {
            $('a[href="' + lastTab + '"]').click();
        }
    });

    //$(function switchTab(el) {
    //    var tabId = $(el).text();  //Get the tab to be searched
    //    var isValid = true;  //Set default as valid
    //    $("#" + tabId).find(".validationMessage:visible").each(function () {
    //        isValid = false;  //this should only fire if the validation message is visible
    //    });
    //    if (!isValid)
    //        $(el).addClass("errors");  //If invalid..add error class to li element.
    //}
    //);

    //-- Begin
    function TestFileType(fileName, fileTypes) {
        if (!fileName) return;

        dots = fileName.split(".")
        //get the part AFTER the LAST period.
        fileType = "." + dots[dots.length - 1];

        return (fileTypes.join(".").indexOf(fileType) != -1) ?
        alert('That file is OK!') :
        alert("Please only upload files that end in types: \n\n" + (fileTypes.join(" .")) + "\n\nPlease select a new file and try again.");
    }
    // -- End

    function CheckFile() {
        var file = document.getElementById('FileUpload1');
        var len = file.value.length;
        var ext = file.value;
        var file2 = document.getElementById('FileUpload2');
        var len2 = file2.value.length;
        var ext2 = file2.value;

        var file3 = document.getElementById('FileUpload3');
        var len3 = file3.value.length;
        var ext3 = file3.value;
        var file4 = document.getElementById('FileUpload4');
        var len4 = file4.value.length;
        var ext4 = file4.value;

        var file5 = document.getElementById('FileUpload5');
        var len5 = file5.value.length;
        var ext5 = file5.value;

        var file6 = document.getElementById('FileUpload6');
        var len6 = file6.value.length;
        var ext6 = file6.value;

        var file7 = document.getElementById('FileUpload7');
        var len7 = file7.value.length;
        var ext7 = file7.value;

        var file8 = document.getElementById('FileUpload8');
        var len8 = file8.value.length;
        var ext8 = file8.value;

        var file9 = document.getElementById('FileUpload9');
        var len9 = file9.value.length;
        var ext9 = file9.value;

        var file10 = document.getElementById('FileUpload10');
        var len10 = file10.value.length;
        var ext10 = file10.value;

        var file11 = document.getElementById('FileUpload11');
        var len11 = file11.value.length;
        var ext11 = file11.value;


        if (file.value.length > 0) {
            if (ext.substr(len - 3, len) != "pdf") {
                alert("selected CIN-file must be a pdf file");
                return false;
            }
        }
        if (file2.value.length > 0) {
            if (ext2.substr(len2 - 3, len2) != "pdf") {
                alert("selected AOA-file must be a pdf file");
                return false;
            }
        }
        if (file3.value.length > 0) {
            if (ext3.substr(len3 - 3, len3) != "pdf") {
                alert("selected MOA-file must be a pdf file");
                return false;
            }
        }
        if (file4.value.length > 0) {
            if (ext4.substr(len4 - 3, len4) != "pdf") {
                alert("selected PAN-file must be a pdf file");
                return false;
            }
        }

        if (file5.value.length > 0) {
            if (ext5.substr(len5 - 3, len5) != "pdf") {
                alert("selected TAN-file must be a pdf file");
                return false;
            }
        }

        if (file6.value.length > 0) {
            if (ext6.substr(len6 - 3, len6) != "pdf") {
                alert("selected PT-file must be a pdf file");
                return false;
            }
        }

        if (file7.value.length > 0) {
            if (ext7.substr(len7 - 3, len7) != "pdf") {
                alert("selected ESI-file must be a pdf file");
                return false;
            }
        }

        if (file8.value.length > 0) {
            if (ext8.substr(len8 - 3, len8) != "pdf") {
                alert("selected EPF-file must be a pdf file");
                return false;
            }
        }

        if (file9.value.length > 0) {
            if (ext9.substr(len9 - 3, len9) != "pdf") {
                alert("selected KYC-file must be a pdf file");
                return false;
            }
        }

        if (file10.value.length > 0) {
            if (ext10.substr(len10 - 3, len10) != "pdf") {
                alert("selected IEC-file must be a pdf file");
                return false;
            }
        }

        if (file11.value.length > 0) {
            if (ext11.substr(len11 - 3, len11) != "pdf") {
                alert("selected UAD-file must be a pdf file");
                return false;
            }
        }
    }

</script>

@if (ViewBag.Error != null)
{
    <script>
        $(document).ready(function () {
            alert('@ViewBag.Error');
        });
    </script>
}

@using (Html.BeginForm("CompanyDetails", "Role1", FormMethod.Post, new { enctype = "multipart/form-data", @id = "form1" }))
{
    @Html.AntiForgeryToken()

    <div id="exTab3" class="container">
        @*@Html.ValidationSummary(false, "", new { @class = "text-danger" })*@
        <ul class="nav nav-pills">
            <li class="active">
                <a href="#1b" data-toggle="tab" id="Company">Company</a>
            </li>
            <li>
                <a href="#2b" data-toggle="tab" id="Certificates">Certificates</a>
            </li>
            <li>
                <a href="#3b" data-toggle="tab" id="BankDetails">BankDetails</a>
            </li>
        </ul>
        <div class="tab-content clearfix">
            <div class="tab-pane active" id="1b">
                <h3 style="text-align:center;text-decoration:underline">COMPANY DETAILS</h3>
                <hr />
                <div class="form-group">
                    @Html.LabelFor(model => model.CmpModels.Company, htmlAttributes: new { @class = "control-label col-md-1" })
                    <div class="col-md-3" style="align-content:center">
                        @Html.EditorFor(model => model.CmpModels.Company, new
                       {
                           htmlAttributes = new
                           {
                               @class = "form-control",
                               //required = "",
                               @oninvalid = "this.setCustomValidity('Company Name is required')",
                               @oninput = "setCustomValidity('')"
                           }
                       })
                        @Html.ValidationMessageFor(model => model.CmpModels.Company, "", new
                       {
                           @class = "text-danger"
                       })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.CmpModels.Abbrevation, htmlAttributes: new { @class = "control-label col-md-1" })
                        <div class="col-md-2">
                            @Html.EditorFor(model => model.CmpModels.Abbrevation, new
                           {
                               htmlAttributes = new
                               {
                                   @class = "text-danger",
                                   //required = "required",
                                   ////required = "",
                                   @oninvalid = "this.setCustomValidity('Abbreviation is required')",
                                   @oninput = "setCustomValidity('')",
                               }
                           })
                            @Html.ValidationMessageFor(model => model.CmpModels.Abbrevation, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <br>
                <br />
                <h4>Address</h4>
                <hr />
                <div class="form-group">
                    @Html.LabelFor(model => model.CmpModels.PlotNo, htmlAttributes: new { @class = "control-label col-md-1" })
                    <div class="col-md-2">
                        @Html.EditorFor(model => model.CmpModels.PlotNo, new
                       {
                           htmlAttributes = new
                           {
                               @class = "form-control",
                               ////required = "",
                               @oninvalid = "this.setCustomValidity('Plot/House Number is required')",
                               @oninput = "setCustomValidity('')"
                           }
                       })
                        @Html.ValidationMessageFor(model => model.CmpModels.PlotNo, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.CmpModels.Street, htmlAttributes: new { @class = "control-label col-md-1" })
                        <div class="col-md-2">
                            @Html.EditorFor(model => model.CmpModels.Street, new
                           {
                               htmlAttributes = new
                               {
                                   @class = "form-control",
                                   ////required = "",
                                   @oninvalid = "this.setCustomValidity('Street field is required')",
                                   @oninput = "setCustomValidity('')"
                               }
                           })
                            @Html.ValidationMessageFor(model => model.CmpModels.Street, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.CmpModels.City, htmlAttributes: new { @class = "control-label col-md-1" })
                            <div class="col-md-2">
                                @Html.EditorFor(model => model.CmpModels.City, new
                               {
                                   htmlAttributes = new
                                   {
                                       @class = "form-control",
                                       ////required = "",
                                       @oninvalid = "this.setCustomValidity('City field is required')",
                                       @oninput = "setCustomValidity('')"
                                   }
                               })
                                @Html.ValidationMessageFor(model => model.CmpModels.City, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
                <br>
                <br />
                <div class="form-group">
                    @Html.LabelFor(model => model.CmpModels.Pincode, htmlAttributes: new { @class = "control-label col-md-1" })

                    <div class="col-md-2">
                        @Html.EditorFor(model => model.CmpModels.Pincode, new
                       {
                           htmlAttributes = new
                           {
                               @class = "form-control",
                               ////required = "",
                               @oninvalid = "this.setCustomValidity('Pincode field is required')",
                               @oninput = "setCustomValidity('')"
                           }
                       })
                        @Html.ValidationMessageFor(model => model.CmpModels.Pincode, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.CmpModels.Country, new { @class = "control-label col-md-1" })
                        <div class="col-md-2">
                            @Html.DropDownListFor(m => m.CmpModels.Country, ViewData["Countries"] as SelectList, "Select Country",
                                                  new
                                                  {
                                                      @class = "form-control",
                                                      @id = "Country",
                                                      ////required = "",
                                                      @oninvalid = "this.setCustomValidity('Please Select Country')",
                                                      @oninput = "setCustomValidity('')"
                                                  })
                            @Html.ValidationMessageFor(m => m.CmpModels.Country, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(m => m.CmpModels.State, new { @class = "control-label col-md-1" })
                            <div class="col-md-2">
                                @Html.DropDownListFor(m => m.CmpModels.State,
                                                        new SelectList(Enumerable.Empty<SelectListItem>(), "StateName"),
                                                        "Select State", new
                                                        {
                                                            @class = "form-control",
                                                            id = "State",
                                                            ////required = "",
                                                            @oninvalid = "this.setCustomValidity('Please Select State')",
                                                            @oninput = "setCustomValidity('')"
                                                        })
                                @Html.ValidationMessageFor(m => m.CmpModels.State, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
                <br><br />
                <h4>Contact Details</h4>
                <hr />
                <div class="form-group">
                    @Html.LabelFor(model => model.CmpModels.MobileNo, htmlAttributes: new { @class = "control-label col-md-1" })
                    <div class="col-md-2">
                        @Html.EditorFor(model => model.CmpModels.MobileNo, new
                       {
                           htmlAttributes = new
                           {
                               @class = "form-control",
                               ////required = "",
                               @oninvalid = "this.setCustomValidity('MobileNo field is required')",
                               @oninput = "setCustomValidity('')"
                           }
                       })
                        @Html.ValidationMessageFor(model => model.CmpModels.MobileNo, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.CmpModels.Website, htmlAttributes: new { @class = "control-label col-md-1" })
                        <div class="col-md-2">
                            @Html.EditorFor(model => model.CmpModels.Website, new
                           {
                               htmlAttributes = new
                               {
                                   @class = "form-control",
                                   ////required = "",
                                   @oninvalid = "this.setCustomValidity('Website field is required')",
                                   @oninput = "setCustomValidity('')"
                               }
                           })
                            @Html.ValidationMessageFor(model => model.CmpModels.Website, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.CmpModels.EmailID, htmlAttributes: new { @class = "control-label col-md-1" })

                        <div class="col-md-2">
                            @Html.EditorFor(model => model.CmpModels.EmailID, new
                           {
                               htmlAttributes = new
                               {
                                   @class = "form-control",
                                   ////required = "",
                                   @oninvalid = "this.setCustomValidity('Mail Id field is required')",
                                   @oninput = "setCustomValidity('')"
                               }
                           })
                            @Html.ValidationMessageFor(model => model.CmpModels.EmailID, "", new { @class = "text-danger" })
                        </div>

                    </div>
                </div>
                <br><br />
                <div class="form-group">
                    @Html.LabelFor(model => model.CmpModels.Fax, htmlAttributes: new { @class = "control-label col-md-1" })

                    <div class="col-md-2">
                        @Html.EditorFor(model => model.CmpModels.Fax, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CmpModels.Fax, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.CmpModels.Logo, htmlAttributes: new
                       {
                           @class = "control-label col-md-1",
                           ////required = "",
                           @oninvalid = "this.setCustomValidity('Logo field is required')",
                           @oninput = "setCustomValidity('')"
                       })
                        <div class="col-md-2">
                            <table>
                                <tr>
                                    <td>
                                        <input class="img-responsive" type="file" name="file" id="imgInp" />
                                        @Html.ValidationMessageFor(model => model.CmpModels.Logo, "", new { @class = "text-danger" })
                                    </td>
                                    <td>
                                        <img id='img-upload' height="50" width="150" />
                                    </td>
                                </tr>
                            </table>
                        </div>
                    </div>
                </div>
                <script>
                    $(document).ready(function () {
                        $(document).on('change', '.btn-file :file', function () {
                            var input = $(this),
                                label = input.val().replace(/\\/g, '/').replace(/.*\//, '');
                            input.trigger('fileselect', [label]);
                        });

                        $('.btn-file :file').on('fileselect', function (event, label) {

                            var input = $(this).parents('.input-group').find(':text'),
                                log = label;

                            if (input.length) {
                                input.val(log);
                            } else {
                                if (log) alert(log);
                            }
                        });
                        function readURL(input) {
                            if (input.files && input.files[0]) {
                                var reader = new FileReader();

                                reader.onload = function (e) {
                                    $('#img-upload').attr('src', e.target.result);
                                }

                                reader.readAsDataURL(input.files[0]);
                            }
                        }

                        $("#imgInp").change(function () {
                            readURL(this);
                        });
                    });
                </script>
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Insert" name="CompanyCreate" class="btn btn-default" />
                    </div>
                    <div class="form-group">
                        <div class="col-md-2">
                        </div>
                    </div>
                </div>
            </div>
            @********************************@
            <div class="tab-pane " id="2b">
                <h3 style="text-align:center;text-decoration:underline">COMPANY DOCUMENTS</h3>
                <br><br />
                <div class="form-group">
                    @Html.LabelFor(model => model.CmpCftModels.Company, htmlAttributes: new { @class = "control-label col-md-1" })
                    <div class="col-md-2">
                        @Html.DropDownListFor(model => model.CmpCftModels.Company,
           new SelectList(ViewBag.CompanyName, "CompanyName"), "select Company", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.CmpCftModels.Company)
                    </div>
                </div>
                <br><br />
                <div class="form-group">
                    @Html.LabelFor(model => model.CmpCftModels.CIN, htmlAttributes: new { @class = "control-label col-md-2" })
                    <input class="col-md-2 btn-primary  btn-sm " type="file" name="file" accept="application/pdf" id="FileUpload1" />
                    <div class="form-group">
                        @Html.LabelFor(model => model.CmpCftModels.AOA, htmlAttributes: new { @class = "control-label col-md-2" })
                        <input class="col-md-2  btn-primary  btn-sm " type="file" name="file" id="FileUpload2" style="border:medium" accept="application/pdf" />
                        <div class="form-group">
                            @Html.LabelFor(model => model.CmpCftModels.MOA, htmlAttributes: new { @class = "control-label col-md-2" })
                            <input class="col-md-2  btn-primary  btn-sm " type="file" name="file" id="FileUpload3" accept="application/pdf" />
                        </div>
                    </div>
                </div>
                <br><br />
                <br><br />
                <div class="form-group">
                    @Html.LabelFor(model => model.CmpCftModels.PAN, htmlAttributes: new { @class = "control-label col-md-2" })
                    <input class="col-md-2  btn-primary  btn-sm " type="file" name="file" id="FileUpload4" accept="application/pdf" />
                    <div class="form-group">
                        @Html.LabelFor(model => model.CmpCftModels.TAN, htmlAttributes: new { @class = "control-label col-md-2" })
                        <input class="col-md-2  btn-primary  btn-sm " type="file" name="file" id="FileUpload5" accept="application/pdf" />
                        <div class="form-group">
                            @Html.LabelFor(model => model.CmpCftModels.PT, htmlAttributes: new { @class = "control-label col-md-2" })
                            <input class="col-md-2  btn-primary  btn-sm " type="file" name="file" id="FileUpload6" accept="application/pdf" />

                        </div>
                    </div>
                </div>
                <br><br />
                <br><br />
                <div class="form-group">
                    @Html.LabelFor(model => model.CmpCftModels.ESI, htmlAttributes: new { @class = "control-label col-md-2" })
                    <input class="col-md-2  btn-primary  btn-sm " type="file" name="file" id="FileUpload7" accept="application/pdf" />
                    <div class="form-group">
                        @Html.LabelFor(model => model.CmpCftModels.EPF, htmlAttributes: new { @class = "control-label col-md-2" })
                        <input class="col-md-2  btn-primary  btn-sm " type="file" name="file" id="FileUpload8" accept="application/pdf" />
                        <div class="form-group">
                            @Html.LabelFor(model => model.CmpCftModels.KYC, htmlAttributes: new { @class = "control-label col-md-2" })
                            <input class="col-md-2  btn-primary  btn-sm " type="file" name="file" id="FileUpload9" accept="application/pdf" />
                        </div>
                    </div>
                </div>
                <br><br />
                <br><br />
                <div class="form-group">
                    @Html.LabelFor(model => model.CmpCftModels.IEC, htmlAttributes: new { @class = "control-label col-md-2" })
                    <input class="col-md-2  btn-primary  btn-sm " type="file" name="file" id="FileUpload10" accept="application/pdf" />
                    <div class="form-group">
                        @Html.LabelFor(model => model.CmpCftModels.UAD, htmlAttributes: new { @class = "control-label col-md-2" })
                        <input class="col-md-2  btn-primary  btn-sm " type="file" name="file" id="FileUpload11" accept="application/pdf" />
                    </div>
                </div>
                <br><br />
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Insert" name="CftCreate" class="btn btn-default" onclick="return CheckFile();" />
                    </div>
                    <div class="form-group">
                        <div class="col-md-2">
                        </div>
                    </div>
                </div>
            </div>
            @******************************@
            <div class="tab-pane" id="3b">
                <h3 style="text-align:center;text-decoration:underline">COMPANY BANKDETAILS</h3>
                <br><br />
                <div class="form-group">
                    @Html.LabelFor(m => m.BnkDtls.Company, htmlAttributes: new { @class = "control-label col-md-1" })
                    <div class="col-md-2">
                        @Html.DropDownListFor(m => m.BnkDtls.Company,
                       new SelectList(ViewBag.CompanyName, "Company"), "select Company", new
                       {
                           @class = "form-control",
                           ////required = "",
                           @oninvalid = "this.setCustomValidity('Please select company name')",
                           @oninput = "setCustomValidity('')"
                       })
                        @Html.ValidationMessageFor(m => m.BnkDtls.Company)
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.BnkDtls.AcHoldername, htmlAttributes: new { @class = "control-label col-md-1" })
                        <div class="col-md-3">
                            @Html.EditorFor(m => m.BnkDtls.AcHoldername, new
                       {
                           htmlAttributes = new
                           {
                               @class = "form-control",
                               ////required = "",
                               @oninvalid = "this.setCustomValidity('Accountholder name is required')",
                               @oninput = "setCustomValidity('')"
                           }
                       })
                            @Html.ValidationMessageFor(m => m.BnkDtls.AcHoldername, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(m => m.BnkDtls.Acnumber, htmlAttributes: new { @class = "control-label col-md-1" })
                            <div class="col-md-3">
                                @Html.EditorFor(m => m.BnkDtls.Acnumber, new
                           {
                               htmlAttributes = new
                               {
                                   @class = "text-danger",
                                   //required = "required",
                                   ////required = "",
                                   @oninvalid = "this.setCustomValidity('Account number is required')",
                                   @oninput = "setCustomValidity('')"
                               }
                           })
                                @Html.ValidationMessageFor(m => m.BnkDtls.Acnumber, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
                <br>
                <br />
                <div class="form-group">
                    @Html.LabelFor(model => model.BnkDtls.BankName, htmlAttributes: new { @class = "control-label col-md-1" })
                    <div class="col-md-2">
                        @Html.DropDownListFor(m => m.BnkDtls.BankName,
                       ViewData["BankNames"] as SelectList, "Select Bank", new
                       {
                           @class = "form-control",
                           @id = "BankName",
                           ////required = "",
                           @oninvalid = "this.setCustomValidity('please select bank')",
                           @oninput = "setCustomValidity('')"
                       })
                        @Html.ValidationMessageFor(m => m.BnkDtls.BankName, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.BnkDtls.IFSC, htmlAttributes: new { @class = "control-label col-md-1" })
                        <div class="col-md-2">
                            @Html.DropDownListFor(m => m.BnkDtls.IFSC,
                                                    new SelectList(Enumerable.Empty<SelectListItem>(), "IFSCCodeName"),
                                                    "Select IFSCCode", new
                                                    {
                                                        @class = "form-control",
                                                        id = "IFSCCode",
                                                        //required = "",
                                                        @oninvalid = "this.setCustomValidity('please select IFSC Code')",
                                                        @oninput = "setCustomValidity('')"
                                                    })
                            @Html.ValidationMessageFor(model => model.BnkDtls.IFSC, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Insert" name="BankCreate" class="btn btn-default" />
                    </div>
                    <div class="form-group">
                        <div class="col-md-2">
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="form-group">
            <br />
            <br />
            <p>@ViewBag.Error<p />
        </div>
    </div>
}

